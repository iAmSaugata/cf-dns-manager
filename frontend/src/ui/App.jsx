
import React, { useEffect, useMemo, useState } from 'react'
const api = async (p,o={})=>{const pw=localStorage.getItem('app_password')||'';const r=await fetch(`/api${p}`,{...o,headers:{'x-app-password':pw,'Content-Type':'application/json',...(o.headers||{})},credentials:'same-origin',cache:'no-store'});let d={};try{d=await r.json()}catch{}if(!r.ok||d.success===false){const e=new Error(d?.error||`Request failed (${r.status})`);e.status=r.status;e.payload=d;throw e}return d}
const Logout=()=> <button className="btn secondary" onClick={()=>{document.cookie='app_password=; Max-Age=0; Path=/';localStorage.removeItem('app_password');location.reload()}}>Sign out</button>
function ZonePicker({onPick}){const [z,setZ]=useState([]),[L,setL]=useState(true),[E,setE]=useState('');useEffect(()=>{(async()=>{try{const d=await api(`/zones?t=${Date.now()}`);const zs=d.result||[];setZ(zs);if(zs.length===1)onPick(zs[0])}catch(e){setE(e.message)}finally{setL(false)}})()},[]);if(L)return <div className="center"><div className="card"><p className="muted">Loading zones…</p></div></div>;return <div className="center" style={{alignItems:'flex-start'}}><div className="wrap" style={{padding:0}}><div className="header" style={{padding:'18px'}}><div className="title">Select Zone</div><Logout/></div><div className="card" style={{margin:'0 18px 18px'}}>{E&&<div className="muted">Error: {E}</div>}{(z||[]).map(v=><div key={v.id} style={{display:'flex',justifyContent:'space-between',padding:'10px 0',borderBottom:'1px solid #2b3d66'}}><div><b>{v.name}</b></div><button className="btn" onClick={()=>onPick(v)}>Open</button></div>)}<div className="footer">Powered by Cloudflare DNS API • © iAmSaugata</div></div></div></div>}
function AddRecord({zoneId,onCreated}){const [t,st]=useState('A'),[n,sn]=useState(''),[c,sc]=useState(''),[ttl,sttl]=useState(1),[p,sp]=useState(false),[cm,scm]=useState(''),[B,sB]=useState(false),[E,sE]=useState('');const add=async()=>{sB(true);sE('');try{const body={type:t,name:n,content:c,ttl:Number(ttl)};if(cm)body.comment=cm;if(['A','AAAA','CNAME'].includes(t))body.proxied=Boolean(p);const d=await api(`/zone/${zoneId}/dns_records`,{method:'POST',body:JSON.stringify(body)});onCreated(d.result);sn('');sc('');scm('')}catch(e){sE(e.message)}finally{sB(false)}};return <div className="inline-form" style={{margin:'6px 0 12px'}}><div></div><select value={t} onChange={e=>st(e.target.value)}>{['A','AAAA','CNAME','TXT','MX','NS','SRV','CAA','PTR'].map(x=><option key={x} value={x}>{x}</option>)}</select><input placeholder="Name (use @ for root)" value={n} onChange={e=>sn(e.target.value)}/><textarea placeholder="Content / Target / Value" value={c} onChange={e=>sc(e.target.value)}/><select value={ttl} onChange={e=>sttl(e.target.value)}><option value={1}>Auto</option>{[60,120,300,600,1200,1800,3600,7200,14400,28800,43200].map(v=><option key={v} value={v}>{v}s</option>)}</select><select value={p?'on':'off'} onChange={e=>sp(e.target.value==='on')}><option value="off">DNS only</option><option value="on">Proxied</option></select><input placeholder="Comment (optional)" value={cm} onChange={e=>scm(e.target.value)}/><div style={{display:'flex',justifyContent:'flex-end'}}><button className="btn" disabled={B||!t||!c} onClick={add}>{B?'Adding…':'Add record'}</button></div>{E&&<div className="muted" style={{gridColumn:'1 / -1'}}>Error: {E}</div>}</div>}
function Row({r,zoneId,onSaved,onDeleted,onToggle,selected}){const [edit,se]=useState(false),[B,sB]=useState(false);const [t,st]=useState(r.type),[n,sn]=useState(r.name),[c,sc]=useState(r.content),[ttl,sttl]=useState(r.ttl),[p,sp]=useState(Boolean(r.proxied)),[cm,scm]=useState(r.comment||'');const save=async()=>{sB(true);try{const body={type:t,name:n,content:c,ttl:Number(ttl),comment:cm};if(['A','AAAA','CNAME'].includes(t))body.proxied=Boolean(p);const d=await api(`/zone/${zoneId}/dns_records/${r.id}`,{method:'PUT',body:JSON.stringify(body)});onSaved(d.result);se(false)}catch(e){alert('Save failed: '+e.message)}finally{sB(false)}};const del=async()=>{if(!confirm(`Delete ${r.type} ${r.name}?`))return;sB(true);try{await api(`/zone/${zoneId}/dns_records/${r.id}`,{method:'DELETE'});onDeleted(r.id)}catch(e){alert('Delete failed: '+e.message)}finally{sB(false)}};if(edit){return <div className="row"><input type="checkbox" checked={selected} onChange={e=>onToggle(r.id,e.target.checked)}/><select value={t} onChange={e=>st(e.target.value)}>{['A','AAAA','CNAME','TXT','MX','NS','SRV','CAA','PTR'].map(x=><option key={x} value={x}>{x}</option>)}</select><input value={n} onChange={e=>sn(e.target.value)}/><textarea value={c} onChange={e=>sc(e.target.value)}/><select value={ttl} onChange={e=>sttl(e.target.value)}><option value={1}>Auto</option>{[60,120,300,600,1200,1800,3600,7200,14400,28800,43200].map(v=><option key={v} value={v}>{v}s</option>)}</select><select value={p?'on':'off'} onChange={e=>sp(e.target.value==='on')}><option value="off">DNS only</option><option value="on">Proxied</option></select><input placeholder="Comment" value={cm} onChange={e=>scm(e.target.value)}/><div className="row-actions"><button className="btn" disabled={B} onClick={save}>{B?'Saving…':'Save'}</button><button className="btn secondary" disabled={B} onClick={()=>se(false)}>Cancel</button></div></div>}return <div className="row"><input type="checkbox" checked={selected} onChange={e=>onToggle(r.id,e.target.checked)}/><div className="cell-wrap">{r.type}</div><div className="cell-wrap">{r.comment?<span className='tooltip'><span style={{display:'inline-flex',gap:6,alignItems:'center'}}><span style={{display:'inline-block',width:14,height:14,border:'1px solid #4e7da6',borderRadius:3,background:'#0f1b33'}}></span>{r.name}</span><span className='tip'>{r.comment}</span></span>:r.name}</div><div className="cell-wrap">{r.content}</div><div className="cell-wrap">{r.ttl===1?'Auto':r.ttl}</div><div className="cell-wrap">{r.proxied?'Proxied':'DNS only'}</div><div className="row-actions"><button className="btn" onClick={()=>se(true)}>Edit</button><button className="btn danger" onClick={del}>Delete</button></div></div>}
function Records({zone,onBack}){const [R,sR]=useState([]),[L,sL]=useState(true),[E,sE]=useState('');const [q,sQ]=useState(''),[ft,sFT]=useState(''),[sel,sSel]=useState({}),[busy,sBusy]=useState(false);const load=async()=>{sL(true);sE('');try{const d=await api(`/zone/${zone.id}/dns_records?per_page=200&t=${Date.now()}`);sR(d.result||[])}catch(e){sE(e.message)}finally{sL(false)}};useEffect(()=>{load()},[zone.id]);const upd=r=>sR(p=>p.map(x=>x.id===r.id?r:x)), rm=id=>sR(p=>p.filter(x=>x.id!==id)), add=r=>sR(p=>[r,...p]);const onToggle=(id,on)=>sSel(p=>({...p,[id]:on}));const all=useMemo(()=>R.length>0&&R.every(r=>sel[r.id]),[R,sel]);const toggleAll=on=>{const m={};R.forEach(r=>m[r.id]=on);sSel(m)};const filtered=useMemo(()=>{const t=q.toLowerCase().trim();return R.filter(r=>{if(ft&&r.type!==ft)return false;if(!t)return true;const hay=[r.type,r.name,r.content,r.comment||''].join(' ').toLowerCase();return hay.includes(t)})},[R,q,ft]);const bulk=async()=>{const ids=Object.entries(sel).filter(([i,on])=>on).map(([i])=>i);if(!ids.length)return;if(!confirm(`Delete ${ids.length} record(s)?`))return;sBusy(true);try{for(const id of ids){await api(`/zone/${zone.id}/dns_records/${id}`,{method:'DELETE'});rm(id)}sSel({})}catch(e){alert('Bulk delete error: '+e.message)}finally{sBusy(false)}};return <div className="wrap"><div className="header"><div className="title">DNS Manager for Zone <b>{zone.name.toUpperCase()}</b></div><div style={{display:'flex',gap:8}}><button className="btn secondary" onClick={onBack}>Change zone</button><Logout/></div></div><div className="card"><div className="filterbar"><select value={ft} onChange={e=>sFT(e.target.value)}><option value="">All types</option>{['A','AAAA','CNAME','TXT','MX','NS','SRV','CAA','PTR'].map(t=><option key={t} value={t}>{t}</option>)}</select><input placeholder="Search type, name, content, or comment…" value={q} onChange={e=>sQ(e.target.value)}/><button className="btn danger" disabled={busy||!Object.values(sel).some(Boolean)} onClick={bulk}>{busy?'Deleting…':'Delete selected'}</button></div><AddRecord zoneId={zone.id} onCreated={add}/>{L&&<p className="muted">Loading…</p>}{E&&<p className="muted">Error: {E}</p>}{!L&&!E&&<><div className="grid th"><div><input type="checkbox" checked={all} onChange={e=>toggleAll(e.target.checked)}/></div><div>Type</div><div>Name</div><div>Content</div><div>TTL</div><div>Proxy</div><div>Actions</div></div>{filtered.map(r=><Row key={r.id} r={r} zoneId={zone.id} onSaved={upd} onDeleted={rm} onToggle={onToggle} selected={!!sel[r.id]}/>)}</>}<div className="footer">Powered by Cloudflare DNS API • © iAmSaugata</div></div></div>}
function Login({onDone}){const [p,sp]=useState(''),[B,sB]=useState(false),[E,sE]=useState('');const go=async()=>{sB(true);sE('');try{localStorage.setItem('app_password',p);document.cookie=`app_password=${encodeURIComponent(p)}; Path=/; SameSite=Lax`;const r=await fetch('/api/health',{headers:{'x-app-password':p},credentials:'same-origin'});if(!r.ok)throw new Error('Invalid password');onDone()}catch(e){sE(e.message)}finally{sB(false)}};return <div className="center"><div className="card" style={{width:'100%',maxWidth:520,padding:'22px'}}><div className="title" style={{marginBottom:8}}>Login</div><p className="muted">Enter the password you configured in <b>APP_PASSWORD</b>.</p><input type="password" placeholder="Password" value={p} onChange={e=>sp(e.target.value)}/><div style={{marginTop:12,display:'flex',gap:10,justifyContent:'space-between'}}><button className="btn" disabled={B||!p} onClick={go}>{B?'Checking…':'Login'}</button><button className="btn secondary" onClick={()=>{localStorage.removeItem('app_password');document.cookie='app_password=; Max-Age=0; Path=/'}}>Clear</button></div>{E&&<p style={{color:'salmon'}}>Error: {E}</p>}<div className="footer">Powered by Cloudflare DNS API • © iAmSaugata</div></div></div>}
export default function App(){const [logged,sL]=useState(!!localStorage.getItem('app_password')); const [zone,sZ]=useState(null); if(!logged) return <Login onDone={()=>sL(true)}/>; if(!zone) return <ZonePicker onPick={z=>sZ(z)}/>; return <Records zone={zone} onBack={()=>sZ(null)}/>}
