import express from "express"; import cors from "cors"; import morgan from "morgan"; import fetch from "node-fetch"; import dotenv from "dotenv"; import path from "path"; import { fileURLToPath } from "url";
dotenv.config(); const __filename=fileURLToPath(import.meta.url); const __dirname=path.dirname(__filename); const app=express(); const PORT=process.env.PORT||5000;
console.log("=== CF DNS Manager starting ==="); console.log("PORT:",PORT,"APP_PASSWORD set:",Boolean(process.env.APP_PASSWORD),"CF_API_TOKEN set:",Boolean(process.env.CF_API_TOKEN));
app.set('trust proxy',true); app.disable('etag'); app.use((req,res,next)=>{res.set('Cache-Control','no-store'); next();}); app.use(express.json()); app.use(cors()); app.use(morgan(':date[iso] :remote-addr ":method :url" :status :res[content-length] - :response-time ms'));
const CF_BASE="https://api.cloudflare.com/client/v4";
function parseCookies(h){const o={}; if(!h) return o; h.split(';').forEach(k=>{const i=k.indexOf('='); if(i>-1){const key=k.substring(0,i).trim(); const val=decodeURIComponent(k.substring(i+1)); o[key]=val;}}); return o;}
function appAuth(req,res,next){ const hdr=req.headers['x-app-password']; const ck=parseCookies(req.headers.cookie||'')['app_password']; const provided=hdr||(ck||''); const expected=process.env.APP_PASSWORD||''; if(!provided) return res.status(401).json({success:false,error:'Unauthorized (no password)'}); if(provided!==expected) return res.status(401).json({success:false,error:'Unauthorized (bad password)'}); next(); }
app.use('/api',appAuth); app.get('/api/health',(req,res)=>res.json({ok:true}));
async function cfFetch(p, opt={}){const url=`${CF_BASE}${p}`; console.log('[CF]',opt.method||'GET',url); const r=await fetch(url,{...opt,headers:{'Content-Type':'application/json','Authorization':`Bearer ${process.env.CF_API_TOKEN}`,...(opt.headers||{})}}); let d={}; try{d=await r.json();}catch{} if(!r.ok||d?.success===false){const e=new Error(d?.errors?.[0]?.message||`Cloudflare API error (${r.status})`); e.status=r.status; e.cf=d; throw e;} return d;}
app.get('/api/zones',async(req,res,n)=>{try{res.json(await cfFetch('/zones?per_page=200&page=1'));}catch(e){n(e);}});
app.get('/api/zone/:z/dns_records',async(req,res,n)=>{try{const {z}=req.params; const {page=1,per_page=200,type='',name='',content=''}=req.query; const q=new URLSearchParams({page,per_page}); if(type)q.set('type',type); if(name)q.set('name',name); if(content)q.set('content',content); res.json(await cfFetch(`/zones/${z}/dns_records?${q.toString()}`));}catch(e){n(e);}});
app.post('/api/zone/:z/dns_records',async(req,res,n)=>{try{const {z}=req.params; res.json(await cfFetch(`/zones/${z}/dns_records`,{method:'POST',body:JSON.stringify(req.body)}));}catch(e){n(e);}});
app.put('/api/zone/:z/dns_records/:id',async(req,res,n)=>{try{const {z,id}=req.params; res.json(await cfFetch(`/zones/${z}/dns_records/${id}`,{method:'PUT',body:JSON.stringify(req.body)}));}catch(e){n(e);}});
app.delete('/api/zone/:z/dns_records/:id',async(req,res,n)=>{try{const {z,id}=req.params; res.json(await cfFetch(`/zones/${z}/dns_records/${id}`,{method:'DELETE'}));}catch(e){n(e);}});
const dist=path.join(__dirname,'frontend','dist'); app.use(express.static(dist)); app.get('*',(_,res)=>res.sendFile(path.join(dist,'index.html')));
app.use((err,req,res,next)=>{res.status(err.status||500).json({success:false,error:err.message,details:err.cf||undefined});});
app.listen(PORT,'0.0.0.0',()=>console.log(`HTTP server listening on 0.0.0.0:${PORT}`));
